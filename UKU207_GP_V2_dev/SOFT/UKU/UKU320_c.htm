<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [E:\Users\Pal\Keil\UKU206\UKU320_c.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image E:\Users\Pal\Keil\UKU206\UKU320_c.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Tue Mar 09 17:12:10 2010
<BR><P>
<H3>Maximum Stack Usage =        560 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ind_hndl &rArr; event_data2ind &rArr; int2lcd &rArr; bin2bcd_int &rArr; __aeabi_uidivmod
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b07658]">Reset_Handler</a>
 <LI><a href="#[b078b0]">Undef_Handler</a>
 <LI><a href="#[b07874]">SWI_Handler</a>
 <LI><a href="#[b07838]">PAbt_Handler</a>
 <LI><a href="#[b077fc]">DAbt_Handler</a>
 <LI><a href="#[b077c0]">IRQ_Handler</a>
 <LI><a href="#[b07784]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[b078b0]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b078b0]">Undef_Handler</a><BR>
 <LI><a href="#[b07874]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b07874]">SWI_Handler</a><BR>
 <LI><a href="#[b07838]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b07838]">PAbt_Handler</a><BR>
 <LI><a href="#[b077fc]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b077fc]">DAbt_Handler</a><BR>
 <LI><a href="#[b077c0]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b077c0]">IRQ_Handler</a><BR>
 <LI><a href="#[b07784]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b07784]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[b07658]">Reset_Handler</a>
 <LI><a href="#[b078b0]">Undef_Handler</a>
 <LI><a href="#[b07874]">SWI_Handler</a>
 <LI><a href="#[b07838]">PAbt_Handler</a>
 <LI><a href="#[b077fc]">DAbt_Handler</a>
 <LI><a href="#[b077c0]">IRQ_Handler</a>
 <LI><a href="#[b07784]">FIQ_Handler</a>
 <LI><a href="#[bb2c94]">__main</a>
 <LI><a href="#[afb40c]">main</a>
 <LI><a href="#[afb5ec]">timer1_interrupt</a>
 <LI><a href="#[bb4d28]">can_isr_err</a>
 <LI><a href="#[bb4f08]">can_isr_rx</a>
 <LI><a href="#[bb4d64]">can_isr_tx</a>
 <LI><a href="#[bb3f54]">uart0_interrupt</a>
 <LI><a href="#[bb2f64]">uart1_interrupt</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b07658]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[bb2c94]"></a>__main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[bb2460]"></a>_main_stk</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[bb2370]"></a>_main_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[bb20a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via Veneer)
</UL>

<P><STRONG><a name="[bb2334]"></a>__main_after_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[bb20a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via Veneer)
</UL>

<P><STRONG><a name="[bb2244]"></a>_main_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[b0608c]"></a>abs</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, common_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afb4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[b034b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_necc_hndl
<LI><a href="#[b03530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_drv
<LI><a href="#[b0383c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_hndl
<LI><a href="#[b039e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_drv
</UL>

<P><STRONG><a name="[b05eac]"></a>clr_scrn</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, common_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b05b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bgnd_par
</UL>

<P><STRONG><a name="[b05e70]"></a>find</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, common_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afb4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[b05ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_data2ind
<LI><a href="#[b05c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
<LI><a href="#[b05d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
<LI><a href="#[b05d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_bgnd
<LI><a href="#[b05dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd_mmm
</UL>

<P><STRONG><a name="[b05e34]"></a>bin2bcd_int</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bin2bcd_int &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bb2988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b05d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
<LI><a href="#[b05d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcdyx
</UL>

<P><STRONG><a name="[b05df8]"></a>bcd2lcd_zero</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bcd2lcd_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[b05d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
<LI><a href="#[b05d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcdyx
</UL>

<P><STRONG><a name="[b05dbc]"></a>int2lcd_mmm</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = int2lcd_mmm &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b05e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
<LI><a href="#[bb285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[afb4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[b05d80]"></a>int2lcdyx</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = int2lcdyx &rArr; bin2bcd_int &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b05df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2lcd_zero
<LI><a href="#[b05e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcd_int
</UL>
<BR>[Called By]<UL><LI><a href="#[afb4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[b05d44]"></a>sub_bgnd</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sub_bgnd
</UL>
<BR>[Calls]<UL><LI><a href="#[b05e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>
<BR>[Called By]<UL><LI><a href="#[afb4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[b05ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_data2ind
<LI><a href="#[b05c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
</UL>

<P><STRONG><a name="[b05d08]"></a>int2lcd</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = int2lcd &rArr; bin2bcd_int &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b05df8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2lcd_zero
<LI><a href="#[b05e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcd_int
<LI><a href="#[b05e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>
<BR>[Called By]<UL><LI><a href="#[afb4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[b05ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_data2ind
<LI><a href="#[b05c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
</UL>

<P><STRONG><a name="[b05ccc]"></a>ptr_carry</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, common_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[afb4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[b05c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
<LI><a href="#[bb2e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
</UL>

<P><STRONG><a name="[b05c90]"></a>event2ind</STRONG> (Thumb, 2300 bytes, Stack size 32 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = event2ind &rArr; int2lcd &rArr; bin2bcd_int &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0581c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[b05858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[b05ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptr_carry
<LI><a href="#[b05d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
<LI><a href="#[b05d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_bgnd
<LI><a href="#[b05e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
<LI><a href="#[bb2988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[afb4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[b05c54]"></a>long2lcdhyx</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = long2lcdhyx
</UL>
<BR>[Called By]<UL><LI><a href="#[afb4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[b05c18]"></a>char2lcdhyx</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = char2lcdhyx
</UL>
<BR>[Called By]<UL><LI><a href="#[afb4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[b05bdc]"></a>pointer_set</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pointer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[afb4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[b05ba0]"></a>tree_down</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tree_down
</UL>
<BR>[Calls]<UL><LI><a href="#[bb276c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[b011cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_hndl
</UL>

<P><STRONG><a name="[b05b64]"></a>tree_up</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tree_up
</UL>
<BR>[Calls]<UL><LI><a href="#[bb276c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[b05aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mess
</UL>

<P><STRONG><a name="[b05b28]"></a>bgnd_par</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bgnd_par
</UL>
<BR>[Calls]<UL><LI><a href="#[b05eac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_scrn
</UL>
<BR>[Called By]<UL><LI><a href="#[afb4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[b05aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mess
</UL>

<P><STRONG><a name="[b05aec]"></a>show_mess</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = show_mess &rArr; tree_up
</UL>
<BR>[Calls]<UL><LI><a href="#[b05768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret
<LI><a href="#[b05b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bgnd_par
<LI><a href="#[b05b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tree_up
<LI><a href="#[bb285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[afb4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[b05ab0]"></a>event_data2ind</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = event_data2ind &rArr; int2lcd &rArr; bin2bcd_int &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0581c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[b05d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
<LI><a href="#[b05d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_bgnd
<LI><a href="#[b05e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>
<BR>[Called By]<UL><LI><a href="#[afb4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[b03a94]"></a>ke_start</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ke_start &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b0275c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[b0284c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_char
</UL>
<BR>[Called By]<UL><LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[b039e0]"></a>ke_drv</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ke_drv &rArr; ke_mem_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b02540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_send
<LI><a href="#[b0275c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[b02798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_mem_hndl
<LI><a href="#[b05858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[b0608c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b039a4]"></a>vz_start</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[b038f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avz_drv
<LI><a href="#[bb2e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
</UL>

<P><STRONG><a name="[b03968]"></a>vz_stop</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = vz_stop &rArr; vz_mem_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b022e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_mem_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[b0392c]"></a>avz_next_date_hndl</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = avz_next_date_hndl &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b0275c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
</UL>
<BR>[Called By]<UL><LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[b038f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avz_drv
</UL>

<P><STRONG><a name="[b038f0]"></a>avz_drv</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = avz_drv &rArr; avz_next_date_hndl &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b0392c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avz_next_date_hndl
<LI><a href="#[b039a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_start
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b038b4]"></a>vz_drv</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vz_drv
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b03878]"></a>kb_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0383c]"></a>kb_hndl</STRONG> (Thumb, 942 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = kb_hndl &rArr; avar_bat_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b02540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_send
<LI><a href="#[b025b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find
<LI><a href="#[b02a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_hndl
<LI><a href="#[b0608c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
<LI><a href="#[bb285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b03800]"></a>samokalibr_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b037c4]"></a>samokalibr_hndl</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = samokalibr_hndl &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b02540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_send
<LI><a href="#[b0275c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b03788]"></a>ubat_old_drv</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ubat_old_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[b02810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_ring
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0374c]"></a>unet_drv</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = unet_drv &rArr; avar_unet_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b02978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b03710]"></a>matemat</STRONG> (Thumb, 548 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = matemat &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0257c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find_unvol
<LI><a href="#[bb285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b036d4]"></a>adc_init</STRONG> (Thumb, 168 bytes, Stack size 4 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = adc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b03698]"></a>adc_drv</STRONG> (Thumb, 926 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adc_drv
</UL>
<BR>[Called By]<UL><LI><a href="#[afb5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_interrupt (via Veneer)
</UL>

<P><STRONG><a name="[b0365c]"></a>avg_hndl</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = avg_hndl &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bb285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b03620]"></a>rele_hndl</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rele_hndl
</UL>
<BR>[Calls]<UL><LI><a href="#[b0257c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find_unvol
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b035e4]"></a>bps_hndl</STRONG> (Thumb, 424 bytes, Stack size 32 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bps_hndl
</UL>
<BR>[Calls]<UL><LI><a href="#[b0257c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find_unvol
<LI><a href="#[b02888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b035a8]"></a>bps_drv</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = bps_drv &rArr; avar_bps_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b029f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0356c]"></a>bat_hndl</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bat_hndl
</UL>
<BR>[Calls]<UL><LI><a href="#[b0257c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find_unvol
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b03530]"></a>bat_drv</STRONG> (Thumb, 838 bytes, Stack size 32 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = bat_drv &rArr; wrk_mem_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b022ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrk_mem_hndl
<LI><a href="#[b0275c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[b0284c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_char
<LI><a href="#[b02888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
<LI><a href="#[b02a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_hndl
<LI><a href="#[b05858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[b0608c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
<LI><a href="#[bb2988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b034f4]"></a>u_necc_hndl</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = u_necc_hndl &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b0257c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find_unvol
<LI><a href="#[b02888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
<LI><a href="#[bb285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bb2988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b034b8]"></a>num_necc_hndl</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = num_necc_hndl &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b02888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
<LI><a href="#[b0608c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
<LI><a href="#[bb285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0347c]"></a>cntrl_hndl</STRONG> (Thumb, 574 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cntrl_hndl &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b02540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_send
<LI><a href="#[b0257c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find_unvol
<LI><a href="#[b02888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
<LI><a href="#[bb285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bb2988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b01d0c]"></a>mess_hndl</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, mess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mess_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b02540]"></a>mess_send</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, mess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mess_send
</UL>
<BR>[Called By]<UL><LI><a href="#[afb4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[b0347c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntrl_hndl
<LI><a href="#[b037c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samokalibr_hndl
<LI><a href="#[b0383c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_hndl
<LI><a href="#[b039e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_drv
<LI><a href="#[bb4cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an2
</UL>

<P><STRONG><a name="[b025b8]"></a>mess_find</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, mess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mess_find
</UL>
<BR>[Called By]<UL><LI><a href="#[afb4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[b0383c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_hndl
</UL>

<P><STRONG><a name="[b0257c]"></a>mess_find_unvol</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, mess.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afb4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[b0347c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntrl_hndl
<LI><a href="#[b034f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_necc_hndl
<LI><a href="#[b0356c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_hndl
<LI><a href="#[b035e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bps_hndl
<LI><a href="#[b03620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rele_hndl
<LI><a href="#[b03710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matemat
</UL>

<P><STRONG><a name="[b012bc]"></a>ret_ind</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ret.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[b01208]"></a>ret_ind_sec</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ret.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[b05768]"></a>ret</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ret.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[b05aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mess
</UL>

<P><STRONG><a name="[b011cc]"></a>ret_hndl</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ret.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ret_hndl &rArr; tree_down
</UL>
<BR>[Calls]<UL><LI><a href="#[b05ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tree_down
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b00ca4]"></a>gran_ring_char</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gran.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[b0284c]"></a>gran_char</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gran.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afaea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_read
<LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[afb4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[b03530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_drv
<LI><a href="#[b03a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_start
</UL>

<P><STRONG><a name="[b02888]"></a>gran</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gran.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[b0347c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntrl_hndl
<LI><a href="#[b034b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_necc_hndl
<LI><a href="#[b034f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_necc_hndl
<LI><a href="#[b03530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_drv
<LI><a href="#[b035e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bps_hndl
<LI><a href="#[bb2e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
</UL>

<P><STRONG><a name="[b02810]"></a>gran_ring</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gran.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b03788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ubat_old_drv
</UL>

<P><STRONG><a name="[b00380]"></a>avar_hndl</STRONG> (Thumb, 334 bytes, Stack size 8 bytes, avar_hndl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = avar_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b00344]"></a>reload_hndl</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, avar_hndl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = reload_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b002cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[b0275c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[b05858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b02978]"></a>avar_unet_hndl</STRONG> (Thumb, 522 bytes, Stack size 24 bytes, avar_hndl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = avar_unet_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b002cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[b0275c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[b0581c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[b05858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[b0374c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unet_drv
</UL>

<P><STRONG><a name="[b029f0]"></a>avar_bps_hndl</STRONG> (Thumb, 622 bytes, Stack size 40 bytes, avar_hndl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = avar_bps_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b002cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[b0275c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[b0581c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[b05858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[afb574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_drv
<LI><a href="#[b035a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bps_drv
<LI><a href="#[bb4cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an2
</UL>

<P><STRONG><a name="[b022ac]"></a>wrk_mem_hndl</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, avar_hndl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = wrk_mem_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b002cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[b0275c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[b05858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[b03530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_drv
</UL>

<P><STRONG><a name="[b02a2c]"></a>avar_bat_hndl</STRONG> (Thumb, 544 bytes, Stack size 24 bytes, avar_hndl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = avar_bat_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b002cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[b0275c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[b0581c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[b05858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[b03530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_drv
<LI><a href="#[b0383c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_hndl
</UL>

<P><STRONG><a name="[b02798]"></a>ke_mem_hndl</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, avar_hndl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ke_mem_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b002cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[b0275c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[b05858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[b039e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_drv
</UL>

<P><STRONG><a name="[b022e8]"></a>vz_mem_hndl</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, avar_hndl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vz_mem_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b002cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[b0275c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[b0581c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[b05858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[b03968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_stop
</UL>

<P><STRONG><a name="[afb5b0]"></a>def_set</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = def_set &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b0275c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
</UL>
<BR>[Called By]<UL><LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[afb574]"></a>net_drv</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = net_drv &rArr; avar_bps_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[afb0c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_out
<LI><a href="#[b029f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[afb538]"></a>parol_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[afb4fc]"></a>bitmap_hndl</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bitmap_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[afb4c0]"></a>ind_hndl</STRONG> (Thumb, 18948 bytes, Stack size 464 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = ind_hndl &rArr; event_data2ind &rArr; int2lcd &rArr; bin2bcd_int &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b02540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_send
<LI><a href="#[b0257c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find_unvol
<LI><a href="#[b025b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find
<LI><a href="#[b0284c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_char
<LI><a href="#[b0581c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[b05858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[b05ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_data2ind
<LI><a href="#[b05aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mess
<LI><a href="#[b05b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bgnd_par
<LI><a href="#[b05bdc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointer_set
<LI><a href="#[b05c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char2lcdhyx
<LI><a href="#[b05c54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long2lcdhyx
<LI><a href="#[b05c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
<LI><a href="#[b05ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptr_carry
<LI><a href="#[b05d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
<LI><a href="#[b05d44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_bgnd
<LI><a href="#[b05d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcdyx
<LI><a href="#[b05dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd_mmm
<LI><a href="#[b05e70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
<LI><a href="#[b0608c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
<LI><a href="#[bb285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[bb2988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[afb484]"></a>but_drv</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = but_drv
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[afb448]"></a>but_an</STRONG> (Thumb, 10800 bytes, Stack size 72 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = but_an &rArr; vz_stop &rArr; vz_mem_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[afae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_write
<LI><a href="#[afb04c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
<LI><a href="#[afb0c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_out
<LI><a href="#[afb13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_out_adr
<LI><a href="#[afb178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_init
<LI><a href="#[afb538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parol_init
<LI><a href="#[afb5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_set
<LI><a href="#[b00ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_ring_char
<LI><a href="#[b01208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_ind_sec
<LI><a href="#[b012bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_ind
<LI><a href="#[b0275c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[b0284c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_char
<LI><a href="#[b02888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
<LI><a href="#[b0392c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avz_next_date_hndl
<LI><a href="#[b03968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_stop
<LI><a href="#[b039a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_start
<LI><a href="#[b03a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_start
<LI><a href="#[b05768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret
<LI><a href="#[b0581c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[b05858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[b05aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mess
<LI><a href="#[b05b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tree_up
<LI><a href="#[b05ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tree_down
<LI><a href="#[b05ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptr_carry
<LI><a href="#[bb285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[afb40c]"></a>main</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = main &rArr; ind_hndl &rArr; event_data2ind &rArr; int2lcd &rArr; bin2bcd_int &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[afad04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_reset
<LI><a href="#[afad40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init
<LI><a href="#[afad7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in1
<LI><a href="#[afadb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in0
<LI><a href="#[afadf4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[afae30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
<LI><a href="#[afaea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_read
<LI><a href="#[afaee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_read
<LI><a href="#[afaf20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
<LI><a href="#[afaf5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_on
<LI><a href="#[afaf98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init_
<LI><a href="#[afafd4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[afb010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[afb088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer1
<LI><a href="#[afb100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_init
<LI><a href="#[afb1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_hndl
<LI><a href="#[afb2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_write
<LI><a href="#[afb31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_reset
<LI><a href="#[afb358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_drv
<LI><a href="#[afb3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullCAN_SetFilter
<LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[afb484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_drv
<LI><a href="#[afb4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[afb4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_hndl
<LI><a href="#[afb574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_drv
<LI><a href="#[b00344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_hndl
<LI><a href="#[b00380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_hndl
<LI><a href="#[b011cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_hndl
<LI><a href="#[b01d0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_hndl
<LI><a href="#[b0347c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntrl_hndl
<LI><a href="#[b034b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_necc_hndl
<LI><a href="#[b034f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_necc_hndl
<LI><a href="#[b03530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_drv
<LI><a href="#[b0356c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_hndl
<LI><a href="#[b035a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bps_drv
<LI><a href="#[b035e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bps_hndl
<LI><a href="#[b03620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rele_hndl
<LI><a href="#[b0365c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avg_hndl
<LI><a href="#[b036d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[b03710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matemat
<LI><a href="#[b0374c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unet_drv
<LI><a href="#[b03788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ubat_old_drv
<LI><a href="#[b037c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samokalibr_hndl
<LI><a href="#[b03800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samokalibr_init
<LI><a href="#[b0383c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_hndl
<LI><a href="#[b03878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_init
<LI><a href="#[b038b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_drv
<LI><a href="#[b038f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avz_drv
<LI><a href="#[b039e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_drv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[afb5ec]"></a>timer1_interrupt</STRONG> (ARM, 532 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = timer1_interrupt &rArr; adc_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[afb1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_drv (via Veneer)
<LI><a href="#[b03698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_drv (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text)
</UL>
<P><STRONG><a name="[afa890]"></a>i2c_Start</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_write
<LI><a href="#[afaea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_read
</UL>

<P><STRONG><a name="[afa854]"></a>i2c_Restart</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afaea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_read
</UL>

<P><STRONG><a name="[afa818]"></a>i2c_SendByte</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[afa7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendAddress
<LI><a href="#[afae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_write
<LI><a href="#[afaea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_read
</UL>

<P><STRONG><a name="[afa7dc]"></a>i2c_SendAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_SendAddress &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[afa818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[afae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_write
<LI><a href="#[afaea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_read
</UL>

<P><STRONG><a name="[afa7a0]"></a>i2c_ReadAcknowledge</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_write
<LI><a href="#[afaea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_read
</UL>

<P><STRONG><a name="[afa764]"></a>i2c_ReadByte</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[afaea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_read
</UL>

<P><STRONG><a name="[afa728]"></a>i2c_SendAcknowledge</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afaea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_read
</UL>

<P><STRONG><a name="[afa6ec]"></a>i2c_Stop</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_write
<LI><a href="#[afaea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_read
</UL>

<P><STRONG><a name="[afad40]"></a>watchdog_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, watchdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = watchdog_init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bb2988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[afad04]"></a>watchdog_reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, watchdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = watchdog_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[afa14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via Veneer)
<LI><a href="#[afa188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[afaee4]"></a>memo_read</STRONG> (Thumb, 1450 bytes, Stack size 24 bytes, memo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = memo_read &rArr; lc640_read_long &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[af9dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long
<LI><a href="#[b05858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[afb088]"></a>init_timer1</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb8694]"></a>lcd1_chk</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb852c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data1_wr
<LI><a href="#[bb85a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_wr
</UL>

<P><STRONG><a name="[bb85e0]"></a>lcd2_chk</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb84f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data2_wr
<LI><a href="#[bb8568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_wr
</UL>

<P><STRONG><a name="[bb85a4]"></a>lcd1_wr</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd1_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb8694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[afaf5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_on
<LI><a href="#[bb843c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_raw
<LI><a href="#[bb8478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_col
<LI><a href="#[bb84b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_page
</UL>

<P><STRONG><a name="[bb8568]"></a>lcd2_wr</STRONG> (Thumb, 188 bytes, Stack size 12 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb85e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[afaf5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_on
<LI><a href="#[bb843c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_raw
<LI><a href="#[bb8478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_col
<LI><a href="#[bb84b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_page
</UL>

<P><STRONG><a name="[bb852c]"></a>data1_wr</STRONG> (Thumb, 186 bytes, Stack size 12 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = data1_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb8694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[afaf20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
<LI><a href="#[afb010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[bb84f0]"></a>data2_wr</STRONG> (Thumb, 184 bytes, Stack size 12 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = data2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb85e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[afaf20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
<LI><a href="#[afb010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[bb84b4]"></a>lcd_set_page</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_set_page &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb8568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_wr
<LI><a href="#[bb85a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[afaf20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
<LI><a href="#[afb010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[bb8478]"></a>lcd_set_col</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_set_col &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb8568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_wr
<LI><a href="#[bb85a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[afaf20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
<LI><a href="#[afb010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[bb843c]"></a>lcd_set_raw</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_set_raw &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb8568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_wr
<LI><a href="#[bb85a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[afaf20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
</UL>

<P><STRONG><a name="[afafd4]"></a>lcd_init</STRONG> (Thumb, 194 bytes, Stack size 4 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lcd_init
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[afaf98]"></a>lcd_init_</STRONG> (Thumb, 184 bytes, Stack size 4 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lcd_init_
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[afb010]"></a>lcd_clear</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_clear &rArr; lcd_set_col &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb8478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_col
<LI><a href="#[bb84b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_page
<LI><a href="#[bb84f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data2_wr
<LI><a href="#[bb852c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[afaf5c]"></a>lcd_on</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_on &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb8568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_wr
<LI><a href="#[bb85a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[afaf20]"></a>lcd_out</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lcd_out &rArr; lcd_set_raw &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb843c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_raw
<LI><a href="#[bb8478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_col
<LI><a href="#[bb84b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_page
<LI><a href="#[bb84f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data2_wr
<LI><a href="#[bb852c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[afaea8]"></a>pcf8563_read</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, pcf8563.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pcf8563_read &rArr; i2c_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[afa6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[afa728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendAcknowledge
<LI><a href="#[afa764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[afa7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadAcknowledge
<LI><a href="#[afa7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendAddress
<LI><a href="#[afa818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[afa854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Restart
<LI><a href="#[afa890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
<LI><a href="#[b0284c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_char
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[afae6c]"></a>pcf8563_write</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pcf8563.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pcf8563_write &rArr; i2c_SendAddress &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[afa14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via Veneer)
<LI><a href="#[afa188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via Veneer)
<LI><a href="#[afa6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[afa7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadAcknowledge
<LI><a href="#[afa7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendAddress
<LI><a href="#[afa818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[afa890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[bb7050]"></a>spi1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, 25lc640.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af9dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long
<LI><a href="#[afb04c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
<LI><a href="#[afb2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_write
<LI><a href="#[b002cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[b0275c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[b0581c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[b05858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[bb6894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_read
<LI><a href="#[bb6f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
<LI><a href="#[bb6f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[bb6f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
</UL>

<P><STRONG><a name="[bb7014]"></a>spi1_config</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, 25lc640.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af9dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long
<LI><a href="#[afb04c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
<LI><a href="#[b002cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[b0275c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[b0581c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[b05858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[bb6f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
<LI><a href="#[bb6f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[bb6f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
</UL>

<P><STRONG><a name="[bb6fd8]"></a>spi1_unconfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, 25lc640.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af9dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long
<LI><a href="#[afb04c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
<LI><a href="#[afb2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_write
<LI><a href="#[b002cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[b0275c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[b0581c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[b05858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[bb6894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_read
<LI><a href="#[bb6f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
<LI><a href="#[bb6f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[bb6f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
</UL>

<P><STRONG><a name="[bb6f9c]"></a>lc640_wren</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lc640_wren
</UL>
<BR>[Calls]<UL><LI><a href="#[bb6fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[bb7014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[bb7050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[afb04c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
<LI><a href="#[b002cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[b0275c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[bb6f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
</UL>

<P><STRONG><a name="[bb6f60]"></a>lc640_rdsr</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb6fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[bb7014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[bb7050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[af9dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long
<LI><a href="#[afb04c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
<LI><a href="#[b002cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[b0275c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[b0581c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[b05858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[bb6f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
</UL>

<P><STRONG><a name="[b05858]"></a>lc640_read_int</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lc640_read_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb6f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[bb6fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[bb7014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[bb7050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[afaee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_read
<LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[afb4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[b00344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_hndl
<LI><a href="#[b022ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrk_mem_hndl
<LI><a href="#[b022e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_mem_hndl
<LI><a href="#[b02798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_mem_hndl
<LI><a href="#[b02978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
<LI><a href="#[b029f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
<LI><a href="#[b02a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_hndl
<LI><a href="#[b03530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_drv
<LI><a href="#[b039e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_drv
<LI><a href="#[b05c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
<LI><a href="#[bb2e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
</UL>

<P><STRONG><a name="[af9dc8]"></a>lc640_read_long</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lc640_read_long &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb6f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[bb6fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[bb7014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[bb7050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[afaee4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_read
<LI><a href="#[bb3db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an0
</UL>

<P><STRONG><a name="[b0581c]"></a>lc640_read_long_ptr</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lc640_read_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb6f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[bb6fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[bb7014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[bb7050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[afb4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[b022e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_mem_hndl
<LI><a href="#[b02978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
<LI><a href="#[b029f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
<LI><a href="#[b02a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_hndl
<LI><a href="#[b05ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_data2ind
<LI><a href="#[b05c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
<LI><a href="#[bb2e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
</UL>

<P><STRONG><a name="[afb04c]"></a>lc640_write</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lc640_write &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb6f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[bb6f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
<LI><a href="#[bb6fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[bb7014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[bb7050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[b0275c]"></a>lc640_write_int</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb6f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[bb6f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
<LI><a href="#[bb6fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[bb7014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[bb7050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[afb5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_set
<LI><a href="#[b00344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_hndl
<LI><a href="#[b022ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrk_mem_hndl
<LI><a href="#[b022e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_mem_hndl
<LI><a href="#[b02798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_mem_hndl
<LI><a href="#[b02978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
<LI><a href="#[b029f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
<LI><a href="#[b02a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_hndl
<LI><a href="#[b03530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_drv
<LI><a href="#[b037c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samokalibr_hndl
<LI><a href="#[b0392c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avz_next_date_hndl
<LI><a href="#[b039e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_drv
<LI><a href="#[b03a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_start
<LI><a href="#[bb2e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
</UL>

<P><STRONG><a name="[bb6f24]"></a>lc640_write_long</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lc640_write_long &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb6f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[bb6f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
<LI><a href="#[bb6fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[bb7014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[bb7050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[bb3db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an0
</UL>

<P><STRONG><a name="[b002cc]"></a>lc640_write_long_ptr</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb6f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[bb6f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
<LI><a href="#[bb6fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[bb7014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[bb7050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[b00344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_hndl
<LI><a href="#[b022ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrk_mem_hndl
<LI><a href="#[b022e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_mem_hndl
<LI><a href="#[b02798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_mem_hndl
<LI><a href="#[b02978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
<LI><a href="#[b029f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
<LI><a href="#[b02a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_hndl
</UL>

<P><STRONG><a name="[bb68d0]"></a>spi1_ad7705_config</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ad7705.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afb2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_write
<LI><a href="#[bb6894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_read
</UL>

<P><STRONG><a name="[afb31c]"></a>ad7705_reset</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ad7705.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afb358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_drv
<LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[afb2e0]"></a>ad7705_write</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ad7705.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ad7705_write
</UL>
<BR>[Calls]<UL><LI><a href="#[bb68d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_ad7705_config
<LI><a href="#[bb6fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[bb7050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[afb358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_drv
<LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb6894]"></a>ad7705_read</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, ad7705.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ad7705_read
</UL>
<BR>[Calls]<UL><LI><a href="#[bb68d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_ad7705_config
<LI><a href="#[bb6fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[bb7050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[afb358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_drv
</UL>

<P><STRONG><a name="[afb358]"></a>ad7705_drv</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, ad7705.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ad7705_drv &rArr; ad7705_write
</UL>
<BR>[Calls]<UL><LI><a href="#[afa14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via Veneer)
<LI><a href="#[afa188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via Veneer)
<LI><a href="#[afb2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_write
<LI><a href="#[afb31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_reset
<LI><a href="#[bb6894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_read
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[afb178]"></a>beep_init</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = beep_init
</UL>
<BR>[Called By]<UL><LI><a href="#[afb1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_hndl
<LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[afb1b4]"></a>beep_hndl</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = beep_hndl &rArr; beep_init
</UL>
<BR>[Calls]<UL><LI><a href="#[afb178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_init
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[afb1f0]"></a>beep_drv</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, beep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afb5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_interrupt (via Veneer)
</UL>

<P><STRONG><a name="[bb4ecc]"></a>CRC1_in</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC1_in
</UL>
<BR>[Called By]<UL><LI><a href="#[bb4f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_isr_rx (via Veneer)
</UL>

<P><STRONG><a name="[bb4da0]"></a>CRC2_in</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC2_in
</UL>
<BR>[Called By]<UL><LI><a href="#[bb4f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_isr_rx (via Veneer)
</UL>

<P><STRONG><a name="[afb13c]"></a>can1_out_adr</STRONG> (Thumb, 854 bytes, Stack size 20 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = can1_out_adr
</UL>
<BR>[Called By]<UL><LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[afb0c4]"></a>can2_out</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = can2_out
</UL>
<BR>[Called By]<UL><LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[afb574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_drv
</UL>

<P><STRONG><a name="[bb4cec]"></a>can_in_an</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, full_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb4f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_isr_rx (via Veneer)
</UL>

<P><STRONG><a name="[bb4cb0]"></a>can_in_an2</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = can_in_an2 &rArr; avar_bps_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[b02540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_send
<LI><a href="#[b029f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[bb4f08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_isr_rx (via Veneer)
</UL>

<P><STRONG><a name="[afb100]"></a>can2_init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can2_init
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[afb3d0]"></a>FullCAN_SetFilter</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FullCAN_SetFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb4f08]"></a>can_isr_rx</STRONG> (ARM, 544 bytes, Stack size 56 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = can_isr_rx &rArr; can_in_an2 &rArr; avar_bps_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb4cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an2 (via Veneer)
<LI><a href="#[bb4cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an (via Veneer)
<LI><a href="#[bb4da0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC2_in (via Veneer)
<LI><a href="#[bb4ecc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC1_in (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> full_can.o(.text)
</UL>
<P><STRONG><a name="[bb4d64]"></a>can_isr_tx</STRONG> (ARM, 268 bytes, Stack size 44 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = can_isr_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> full_can.o(.text)
</UL>
<P><STRONG><a name="[bb4d28]"></a>can_isr_err</STRONG> (ARM, 72 bytes, Stack size 12 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = can_isr_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> full_can.o(.text)
</UL>
<P><STRONG><a name="[bb3f18]"></a>crc_87</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crc_87
</UL>
<BR>[Called By]<UL><LI><a href="#[bb2e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
<LI><a href="#[bb3db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an0
</UL>

<P><STRONG><a name="[bb3e64]"></a>crc_95</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crc_95
</UL>
<BR>[Called By]<UL><LI><a href="#[bb2e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
<LI><a href="#[bb3db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an0
</UL>

<P><STRONG><a name="[bb3e28]"></a>putchar0</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = putchar0
</UL>
<BR>[Called By]<UL><LI><a href="#[bb3dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_out_adr0
</UL>

<P><STRONG><a name="[bb3dec]"></a>uart_out_adr0</STRONG> (Thumb, 72 bytes, Stack size 68 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = uart_out_adr0 &rArr; putchar0
</UL>
<BR>[Calls]<UL><LI><a href="#[bb3e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar0
</UL>
<BR>[Called By]<UL><LI><a href="#[bb3db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an0
</UL>

<P><STRONG><a name="[afae30]"></a>uart0_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart0_init
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb3db0]"></a>uart_in_an0</STRONG> (Thumb, 394 bytes, Stack size 56 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = uart_in_an0 &rArr; uart_out_adr0 &rArr; putchar0
</UL>
<BR>[Calls]<UL><LI><a href="#[af9dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long
<LI><a href="#[bb3dec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_out_adr0
<LI><a href="#[bb3e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_95
<LI><a href="#[bb3f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_87
<LI><a href="#[bb6f24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
</UL>
<BR>[Called By]<UL><LI><a href="#[afadb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in0
</UL>

<P><STRONG><a name="[bb3d74]"></a>index_offset0</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afadb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in0
<LI><a href="#[bb3d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_check0
</UL>

<P><STRONG><a name="[bb3d38]"></a>control_check0</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = control_check0
</UL>
<BR>[Calls]<UL><LI><a href="#[bb3d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_offset0
</UL>
<BR>[Called By]<UL><LI><a href="#[afadb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in0
</UL>

<P><STRONG><a name="[afadb8]"></a>uart_in0</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = uart_in0 &rArr; uart_in_an0 &rArr; uart_out_adr0 &rArr; putchar0
</UL>
<BR>[Calls]<UL><LI><a href="#[afa14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via Veneer)
<LI><a href="#[afa188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via Veneer)
<LI><a href="#[bb3d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_check0
<LI><a href="#[bb3d74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_offset0
<LI><a href="#[bb3db0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an0
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb3f54]"></a>uart0_interrupt</STRONG> (ARM, 200 bytes, Stack size 24 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart0.o(.text)
</UL>
<P><STRONG><a name="[bb2eec]"></a>putchar1</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = putchar1
</UL>
<BR>[Called By]<UL><LI><a href="#[bb2e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_out_adr1
<LI><a href="#[bb2eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_out1
</UL>

<P><STRONG><a name="[bb2eb0]"></a>uart_out1</STRONG> (Thumb, 88 bytes, Stack size 36 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_out1 &rArr; putchar1
</UL>
<BR>[Calls]<UL><LI><a href="#[bb2eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar1
</UL>
<BR>[Called By]<UL><LI><a href="#[bb2e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
</UL>

<P><STRONG><a name="[bb2e74]"></a>uart_out_adr1</STRONG> (Thumb, 82 bytes, Stack size 316 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = uart_out_adr1 &rArr; putchar1
</UL>
<BR>[Calls]<UL><LI><a href="#[bb2eec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar1
</UL>
<BR>[Called By]<UL><LI><a href="#[bb2e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
</UL>

<P><STRONG><a name="[afadf4]"></a>uart1_init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb2e38]"></a>uart_in_an1</STRONG> (Thumb, 5046 bytes, Stack size 48 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = uart_in_an1 &rArr; uart_out_adr1 &rArr; putchar1
</UL>
<BR>[Calls]<UL><LI><a href="#[b0275c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[b02888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
<LI><a href="#[b039a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_start
<LI><a href="#[b0581c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[b05858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[b05ccc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptr_carry
<LI><a href="#[bb2e74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_out_adr1
<LI><a href="#[bb2eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_out1
<LI><a href="#[bb3e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_95
<LI><a href="#[bb3f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_87
</UL>
<BR>[Called By]<UL><LI><a href="#[afad7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in1
</UL>

<P><STRONG><a name="[bb2dfc]"></a>index_offset1</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, uart1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[afad7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in1
<LI><a href="#[bb2dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_check1
</UL>

<P><STRONG><a name="[bb2dc0]"></a>control_check1</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = control_check1
</UL>
<BR>[Calls]<UL><LI><a href="#[bb2dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_offset1
</UL>
<BR>[Called By]<UL><LI><a href="#[afad7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in1
</UL>

<P><STRONG><a name="[afad7c]"></a>uart_in1</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = uart_in1 &rArr; uart_in_an1 &rArr; uart_out_adr1 &rArr; putchar1
</UL>
<BR>[Calls]<UL><LI><a href="#[afa14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via Veneer)
<LI><a href="#[afa188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via Veneer)
<LI><a href="#[bb2dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_check1
<LI><a href="#[bb2dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_offset1
<LI><a href="#[bb2e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
</UL>
<BR>[Called By]<UL><LI><a href="#[afb40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb2f64]"></a>uart1_interrupt</STRONG> (ARM, 204 bytes, Stack size 24 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart1_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart1.o(.text)
</UL>
<P><STRONG><a name="[bb29c4]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[bb2988]"></a>__aeabi_uidivmod</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[afad40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init
<LI><a href="#[afb4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[b0347c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntrl_hndl
<LI><a href="#[b034f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_necc_hndl
<LI><a href="#[b03530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_drv
<LI><a href="#[b05c90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
<LI><a href="#[b05e34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcd_int
<LI><a href="#[bb285c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[bb2898]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[bb285c]"></a>__aeabi_idivmod</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bb2988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[afb448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[afb4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[b0347c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntrl_hndl
<LI><a href="#[b034b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_necc_hndl
<LI><a href="#[b034f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_necc_hndl
<LI><a href="#[b0365c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avg_hndl
<LI><a href="#[b03710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matemat
<LI><a href="#[b0383c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_hndl
<LI><a href="#[b05aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mess
<LI><a href="#[b05dbc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd_mmm
</UL>

<P><STRONG><a name="[bb276c]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b05b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tree_up
<LI><a href="#[b05ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tree_down
</UL>

<P><STRONG><a name="[bb2730]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[bb26f4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[bb20a0]"></a>__scatterload</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bb2028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
<LI><a href="#[bb2334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[bb2370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload (via Veneer)
</UL>

<P><STRONG><a name="[bb2064]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[bb1b3c]"></a>__decompress</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[bb1b00]"></a>__decompress0</STRONG> (ARM, 80 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[bb2028]"></a>__ARM_common_call_via_r3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(i.__ARM_common_call_via_r3))
<BR><BR>[Called By]<UL><LI><a href="#[bb20a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[afa188]"></a>__ARM_common_disable_irq</STRONG> (ARM, 20 bytes, Stack size 0 bytes, watchdog.o(i.__ARM_common_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[afad04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_reset (via Veneer)
<LI><a href="#[afad7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in1 (via Veneer)
<LI><a href="#[afadb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in0 (via Veneer)
<LI><a href="#[afae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_write (via Veneer)
<LI><a href="#[afb358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_drv (via Veneer)
</UL>

<P><STRONG><a name="[afa14c]"></a>__ARM_common_enable_irq</STRONG> (ARM, 16 bytes, Stack size 0 bytes, watchdog.o(i.__ARM_common_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[afad04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_reset (via Veneer)
<LI><a href="#[afad7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in1 (via Veneer)
<LI><a href="#[afadb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in0 (via Veneer)
<LI><a href="#[afae6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_write (via Veneer)
<LI><a href="#[afb358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_drv (via Veneer)
</UL>

<P><STRONG><a name="[bb1ca4]"></a>__scatterload_copy</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb1ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[bb1ca4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[bb1c68]"></a>__scatterload_null</STRONG> (ARM, 4 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[bb1c2c]"></a>__scatterload_zeroinit</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b078b0]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b078b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b078b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b07874]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b07874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b07874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b07838]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b07838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b07838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b077fc]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b077fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b077fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b077c0]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b077c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b077c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b07784]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b07784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b07784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
