<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\exe\UKU20203_1_MS.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\exe\UKU20203_1_MS.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 644]: Last Updated: Mon Apr 22 16:44:02 2013
<BR><P>
<H3>Maximum Stack Usage =        368 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ind_hndl &rArr; event_data2ind &rArr; int2lcd &rArr; bcd2lcd_zero
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[20]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">CAN_IRQHandler</a> from full_can.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[17]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from main.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[b]">TIMER0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">TIMER1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[d]">TIMER2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[e]">TIMER3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">UART0_IRQHandler</a> from uart0.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10]">UART1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">UART2_IRQHandler</a> from uart2.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">UART3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">USB_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[a]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[2b]">main</a> from main.o(.text) referenced from entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[2d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[31]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[bd]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>gran_ring_char</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gran.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[47]"></a>gran_char</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gran.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zar_drv
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_start
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[37]"></a>gran</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gran.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matemat
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_drv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntrl_hndl
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntrl_drv
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avg_hndl
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_hndl
</UL>

<P><STRONG><a name="[8d]"></a>gran_ring</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gran.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ubat_old_drv
</UL>

<P><STRONG><a name="[59]"></a>gran_long</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gran.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[56]"></a>ret_ind</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ret.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[6c]"></a>ret_ind_hndl</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ret.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>ret_ind_sec</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ret.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[79]"></a>ret_ind_sec_hndl</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ret.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>ret</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ret.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[2f]"></a>ret_hndl</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ret.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ret_hndl &rArr; tree_down
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tree_down
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[be]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[c2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[c3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[60]"></a>SystemInit</STRONG> (Thumb, 478 bytes, Stack size 0 bytes, system_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>rtc_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>pwm_init</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>bitmap_hndl</STRONG> (Thumb, 1894 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = bitmap_hndl &rArr; graphic_print_text &rArr; plot
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;graphic_print_text
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;graphic_print
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_rectangle
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ptr
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>ind_hndl</STRONG> (Thumb, 27774 bytes, Stack size 304 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ind_hndl &rArr; event_data2ind &rArr; int2lcd &rArr; bcd2lcd_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_bgnd
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptr_carry
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointer_set
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long2lcd_mmm
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcdyx
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd_mmm
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd_m
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_char
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fl_simv
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_data2ind
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char2lcdhyx
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char2lcdh
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bgnd_par
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>but_an</STRONG> (Thumb, 19800 bytes, Stack size 48 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = but_an &rArr; avar_unet_hndl &rArr; uart_out_adr0
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_mem_hndl
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tree_up
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tree_down
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_ind_sec
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_ind
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptr_carry
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parol_init
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_date_hndl
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_start
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_mem_hndl
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_ring_char
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_long
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_char
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fl_simv
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_set
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_src_reset
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>but_drv</STRONG> (Thumb, 340 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 510 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_drv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>main</STRONG> (Thumb, 482 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = main &rArr; ind_hndl &rArr; event_data2ind &rArr; int2lcd &rArr; bcd2lcd_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zar_superviser_drv
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zar_drv
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unet_drv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ubat_old_drv
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_necc_hndl
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_drv
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src_drv
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spc_drv
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samokalibr_drv
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_ind_sec_hndl
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_ind_hndl
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_hndl
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rele_drv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_out
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnemo_hndl
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_read
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matemat
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_on
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_drv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntrl_hndl
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntrl_drv
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntrl_blok_hndl
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_hndl
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_drv
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avz_hndl
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avg_hndl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apv_drv
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_drv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_drv
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_hndl
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[7e]"></a>apv_drv</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = apv_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_src_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>avg_hndl</STRONG> (Thumb, 430 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = avg_hndl
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>cntrl_drv</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cntrl_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>cntrl_hndl</STRONG> (Thumb, 1574 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = cntrl_hndl &rArr; avar_bat_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>zar_drv</STRONG> (Thumb, 932 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = zar_drv &rArr; wrk_mem_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrk_mem_hndl
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_char
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>zar_superviser_start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zar_superviser_drv
</UL>

<P><STRONG><a name="[70]"></a>zar_superviser_drv</STRONG> (Thumb, 362 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = zar_superviser_drv &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zar_superviser_start
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>spc_drv</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = spc_drv &rArr; vz_mem_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_mem_hndl
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_mem_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>cntrl_blok_hndl</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>bat_drv</STRONG> (Thumb, 412 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bat_drv &rArr; avar_bat_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>beep_hndl</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = beep_hndl
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>kb_start</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_drv
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_drv
</UL>

<P><STRONG><a name="[6f]"></a>kb_drv</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = kb_drv &rArr; avar_bat_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_start
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>matemat</STRONG> (Thumb, 4276 bytes, Stack size 16 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = matemat &rArr; avar_bat_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>bp_on</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_out
</UL>

<P><STRONG><a name="[87]"></a>bp_off</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;out_out
</UL>

<P><STRONG><a name="[72]"></a>out_out</STRONG> (Thumb, 982 bytes, Stack size 4 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = out_out
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bp_off
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bp_on
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>rele_drv</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>kz_on</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samokalibr_drv
</UL>

<P><STRONG><a name="[89]"></a>kz_off</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samokalibr_drv
</UL>

<P><STRONG><a name="[6b]"></a>samokalibr_drv</STRONG> (Thumb, 144 bytes, Stack size 4 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = samokalibr_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kz_off
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kz_on
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>time_drv</STRONG> (Thumb, 172 bytes, Stack size 4 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = time_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>u_necc_hndl</STRONG> (Thumb, 552 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>unet_drv</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = unet_drv &rArr; avar_unet_hndl &rArr; uart_out_adr0
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>blok_src_reset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src_drv
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
</UL>

<P><STRONG><a name="[8a]"></a>apv2_hndl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src_drv
</UL>

<P><STRONG><a name="[69]"></a>src_drv</STRONG> (Thumb, 1066 bytes, Stack size 16 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = src_drv &rArr; avar_bps_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apv2_hndl
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blok_src_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>adc_drv</STRONG> (Thumb, 1074 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_drv
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>ke_start</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ke_start &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_char
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[54]"></a>next_date_hndl</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = next_date_hndl &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[5b]"></a>def_set</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = def_set &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[7f]"></a>ubat_old_drv</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ubat_old_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_ring
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>avz_hndl</STRONG> (Thumb, 270 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>mnemo_hndl</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>avar_src_reset</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, avar.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apv_drv
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[5c]"></a>avar_bat_hndl</STRONG> (Thumb, 796 bytes, Stack size 32 bytes, avar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = avar_bat_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matemat
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_drv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntrl_hndl
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_drv
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[82]"></a>wrk_mem_hndl</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, avar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = wrk_mem_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zar_drv
</UL>

<P><STRONG><a name="[53]"></a>vz_mem_hndl</STRONG> (Thumb, 660 bytes, Stack size 32 bytes, avar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vz_mem_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spc_drv
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[58]"></a>ke_mem_hndl</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, avar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ke_mem_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spc_drv
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[5d]"></a>avar_unet_hndl</STRONG> (Thumb, 1078 bytes, Stack size 32 bytes, avar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = avar_unet_hndl &rArr; uart_out_adr0
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_out_adr0
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_95
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_87
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blok_src_reset
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_src_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unet_drv
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[8c]"></a>avar_bps_hndl</STRONG> (Thumb, 740 bytes, Stack size 40 bytes, avar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = avar_bps_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;src_drv
</UL>

<P><STRONG><a name="[94]"></a>clr_scrn</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, common_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bgnd_par
</UL>

<P><STRONG><a name="[42]"></a>find</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, common_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_bgnd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long2lcd_mmm
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd_mmm
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd_m
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_data2ind
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char2lcdh
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[92]"></a>bin2bcd_int</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, common_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcdyx
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd_m
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
</UL>

<P><STRONG><a name="[93]"></a>bcd2lcd_zero</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bcd2lcd_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcdyx
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd_m
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
</UL>

<P><STRONG><a name="[4a]"></a>int2lcd_m</STRONG> (Thumb, 220 bytes, Stack size 28 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = int2lcd_m &rArr; bcd2lcd_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2lcd_zero
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcd_int
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[3e]"></a>int2lcd_mmm</STRONG> (Thumb, 276 bytes, Stack size 44 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = int2lcd_mmm
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[48]"></a>long2lcd_mmm</STRONG> (Thumb, 272 bytes, Stack size 44 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = long2lcd_mmm
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[3b]"></a>int2lcdyx</STRONG> (Thumb, 132 bytes, Stack size 28 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = int2lcdyx &rArr; bcd2lcd_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2lcd_zero
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcd_int
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[3d]"></a>int2lcd</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = int2lcd &rArr; bcd2lcd_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2lcd_zero
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcd_int
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_data2ind
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[3f]"></a>char2lcdh</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = char2lcdh
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[3c]"></a>char2lcdhyx</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = char2lcdhyx
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[45]"></a>ptr_carry</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ptr_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[50]"></a>parol_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, common_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[3a]"></a>bgnd_par</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bgnd_par
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_scrn
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[41]"></a>sub_bgnd</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sub_bgnd
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_data2ind
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[49]"></a>fl_simv</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fl_simv
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[4b]"></a>event_data2ind</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = event_data2ind &rArr; int2lcd &rArr; bcd2lcd_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_bgnd
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[44]"></a>event2ind</STRONG> (Thumb, 5438 bytes, Stack size 32 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = event2ind &rArr; int2lcd &rArr; bcd2lcd_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_bgnd
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptr_carry
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[4e]"></a>tree_up</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tree_up
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[30]"></a>tree_down</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tree_down
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_hndl
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[43]"></a>pointer_set</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, common_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[35]"></a>draw</STRONG> (Thumb, 1966 bytes, Stack size 56 bytes, graphic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = draw
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_rectangle
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_ptr
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_hndl
</UL>

<P><STRONG><a name="[34]"></a>draw_rectangle</STRONG> (Thumb, 146 bytes, Stack size 36 bytes, graphic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = draw_rectangle &rArr; draw
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_hndl
</UL>

<P><STRONG><a name="[36]"></a>draw_ptr</STRONG> (Thumb, 140 bytes, Stack size 28 bytes, graphic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = draw_ptr &rArr; draw
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_hndl
</UL>

<P><STRONG><a name="[95]"></a>plot</STRONG> (Thumb, 264 bytes, Stack size 36 bytes, graphic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = plot
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;graphic_print_text
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;graphic_print
</UL>

<P><STRONG><a name="[33]"></a>graphic_print</STRONG> (Thumb, 120 bytes, Stack size 44 bytes, graphic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = graphic_print &rArr; plot
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plot
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_hndl
</UL>

<P><STRONG><a name="[38]"></a>graphic_print_text</STRONG> (Thumb, 656 bytes, Stack size 148 bytes, graphic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = graphic_print_text &rArr; plot
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plot
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_hndl
</UL>

<P><STRONG><a name="[76]"></a>memo_read</STRONG> (Thumb, 1454 bytes, Stack size 8 bytes, memo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = memo_read &rArr; lc640_read_long &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>beep_drv</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, beep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[84]"></a>beep_init</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, beep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_hndl
</UL>

<P><STRONG><a name="[99]"></a>spi1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, 25lc640.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
</UL>

<P><STRONG><a name="[98]"></a>spi1_config</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, 25lc640.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
</UL>

<P><STRONG><a name="[9a]"></a>spi1_unconfig</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, 25lc640.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
</UL>

<P><STRONG><a name="[97]"></a>lc640_wren</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lc640_wren
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
</UL>

<P><STRONG><a name="[9b]"></a>lc640_rdsr</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>

<P><STRONG><a name="[40]"></a>lc640_read_int</STRONG> (Thumb, 152 bytes, Stack size 12 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lc640_read_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrk_mem_hndl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zar_superviser_drv
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zar_drv
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_mem_hndl
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spc_drv
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_read
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_mem_hndl
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_hndl
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[96]"></a>lc640_read_long</STRONG> (Thumb, 196 bytes, Stack size 20 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lc640_read_long &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_read
</UL>

<P><STRONG><a name="[46]"></a>lc640_read_long_ptr</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lc640_read_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_mem_hndl
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_data2ind
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_hndl
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[57]"></a>lc640_write</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lc640_write &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[52]"></a>lc640_write_int</STRONG> (Thumb, 164 bytes, Stack size 12 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrk_mem_hndl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zar_superviser_drv
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zar_drv
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_mem_hndl
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spc_drv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_date_hndl
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_start
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_mem_hndl
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_set
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_hndl
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an
</UL>

<P><STRONG><a name="[5a]"></a>lc640_write_long</STRONG> (Thumb, 174 bytes, Stack size 12 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lc640_write_long &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[8e]"></a>lc640_write_long_ptr</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrk_mem_hndl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_mem_hndl
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_mem_hndl
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_hndl
</UL>

<P><STRONG><a name="[9d]"></a>lcd1_chk</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, lcd_agm1232_uku203.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data1_wr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_wr
</UL>

<P><STRONG><a name="[9f]"></a>lcd2_chk</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, lcd_agm1232_uku203.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data2_wr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_wr
</UL>

<P><STRONG><a name="[9c]"></a>lcd1_wr</STRONG> (Thumb, 208 bytes, Stack size 4 bytes, lcd_agm1232_uku203.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lcd1_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_on
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_raw
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_col
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_page
</UL>

<P><STRONG><a name="[9e]"></a>lcd2_wr</STRONG> (Thumb, 208 bytes, Stack size 4 bytes, lcd_agm1232_uku203.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_on
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_raw
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_col
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_page
</UL>

<P><STRONG><a name="[a0]"></a>data1_wr</STRONG> (Thumb, 210 bytes, Stack size 4 bytes, lcd_agm1232_uku203.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = data1_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[a1]"></a>data2_wr</STRONG> (Thumb, 214 bytes, Stack size 4 bytes, lcd_agm1232_uku203.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = data2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[a2]"></a>lcd_set_page</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd_agm1232_uku203.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lcd_set_page &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_wr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[a3]"></a>lcd_set_col</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd_agm1232_uku203.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lcd_set_col &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_wr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[a4]"></a>lcd_set_raw</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lcd_agm1232_uku203.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lcd_set_raw &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_wr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
</UL>

<P><STRONG><a name="[61]"></a>lcd_init</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, lcd_agm1232_uku203.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>lcd_clear</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, lcd_agm1232_uku203.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_clear &rArr; lcd_set_col &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_col
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_page
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data2_wr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>lcd_on</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lcd_agm1232_uku203.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_on &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_wr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>lcd_out</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, lcd_agm1232_uku203.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lcd_out &rArr; lcd_set_raw &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_raw
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_col
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_page
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data2_wr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>CRC1_in</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC1_in
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_isr_rx1
</UL>

<P><STRONG><a name="[ac]"></a>CRC2_in</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC2_in
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_isr_rx1
</UL>

<P><STRONG><a name="[a7]"></a>CRC1_out</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC1_out
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an
</UL>

<P><STRONG><a name="[a8]"></a>CRC2_out</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC2_out
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an
</UL>

<P><STRONG><a name="[a9]"></a>can1_out_adr</STRONG> (Thumb, 1848 bytes, Stack size 8 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can1_out_adr
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an
</UL>

<P><STRONG><a name="[a6]"></a>can_adr_hndl</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, full_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an
</UL>

<P><STRONG><a name="[a5]"></a>can_in_an</STRONG> (Thumb, 1678 bytes, Stack size 8 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_in_an &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_adr_hndl
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_out_adr
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC2_out
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC1_out
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_isr_rx1
</UL>

<P><STRONG><a name="[ad]"></a>can_isr_tx1</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, full_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>can_isr_rx1</STRONG> (Thumb, 438 bytes, Stack size 24 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = can_isr_rx1 &rArr; can_in_an &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC2_in
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC1_in
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>

<P><STRONG><a name="[23]"></a>CAN_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CAN_IRQHandler &rArr; can_isr_rx1 &rArr; can_in_an &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_isr_rx1
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_isr_tx1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UART2_IRQHandler</STRONG> (Thumb, 328 bytes, Stack size 12 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>crc_87</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc_87
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
</UL>

<P><STRONG><a name="[90]"></a>crc_95</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc_95
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
</UL>

<P><STRONG><a name="[ae]"></a>putchar0</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, uart0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_out_adr0
</UL>

<P><STRONG><a name="[91]"></a>uart_out_adr0</STRONG> (Thumb, 112 bytes, Stack size 68 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = uart_out_adr0
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar0
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
</UL>

<P><STRONG><a name="[f]"></a>UART0_IRQHandler</STRONG> (Thumb, 340 bytes, Stack size 12 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL><P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
