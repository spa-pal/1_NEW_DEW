<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\EXE\UKU207_K.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\EXE\UKU207_K.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 481]: Last Updated: Tue Apr 03 10:04:09 2012
<BR><P>
<H3>Maximum Stack Usage =        488 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ind_hndl &rArr; event_data2ind &rArr; int2lcd &rArr; bin2bcd_int &rArr; __aeabi_uidivmod
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[1]">Undef_Handler</a>
 <LI><a href="#[2]">SWI_Handler</a>
 <LI><a href="#[3]">PAbt_Handler</a>
 <LI><a href="#[4]">DAbt_Handler</a>
 <LI><a href="#[5]">IRQ_Handler</a>
 <LI><a href="#[6]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">Undef_Handler</a><BR>
 <LI><a href="#[2]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">SWI_Handler</a><BR>
 <LI><a href="#[3]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">PAbt_Handler</a><BR>
 <LI><a href="#[4]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">DAbt_Handler</a><BR>
 <LI><a href="#[5]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">IRQ_Handler</a><BR>
 <LI><a href="#[6]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1]">Undef_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2]">SWI_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3]">PAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4]">DAbt_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5]">IRQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6]">FIQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[10]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup.o(RESET)
 <LI><a href="#[8]">main</a> from main.o(.text) referenced from entry7.o(.ARM.Collect$$$$00000007)
 <LI><a href="#[9]">timer1_interrupt</a> from main.o(.text) referenced from timer.o(.text)
 <LI><a href="#[a]">can_isr_rx1</a> from full_can.o(.text) referenced from full_can.o(.text)
 <LI><a href="#[b]">can_isr_tx</a> from full_can.o(.text) referenced from full_can.o(.text)
 <LI><a href="#[c]">can_isr_err</a> from full_can.o(.text) referenced from full_can.o(.text)
 <LI><a href="#[d]">can_isr_rx2</a> from full_can.o(.text) referenced from full_can.o(.text)
 <LI><a href="#[e]">uart0_interrupt</a> from uart0.o(.text) referenced from uart0.o(.text)
 <LI><a href="#[f]">uart1_interrupt</a> from uart1.o(.text) referenced from uart1.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>__main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[c2]"></a>_main_stk</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[11]"></a>_main_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via Veneer)
</UL>

<P><STRONG><a name="[b9]"></a>__main_after_scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload (via Veneer)
</UL>

<P><STRONG><a name="[c3]"></a>_main_init</STRONG> (ARM, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[2f]"></a>abs</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, common_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_necc_hndl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_drv
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_hndl
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_drv
</UL>

<P><STRONG><a name="[26]"></a>clr_scrn</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, common_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bgnd_par
</UL>

<P><STRONG><a name="[17]"></a>find</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, common_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_data2ind
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_bgnd
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long2lcd_mmm
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd_mmm
</UL>

<P><STRONG><a name="[13]"></a>bin2bcd_int</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bin2bcd_int &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcdyx
</UL>

<P><STRONG><a name="[1b]"></a>bcd2lcd_zero</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bcd2lcd_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcdyx
</UL>

<P><STRONG><a name="[15]"></a>int2lcd_mmm</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = int2lcd_mmm &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[18]"></a>long2lcd_mmm</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = long2lcd_mmm &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[19]"></a>long2lcdyx_mmm</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = long2lcdyx_mmm &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[1a]"></a>int2lcdyx</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = int2lcdyx &rArr; bin2bcd_int &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2lcd_zero
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcd_int
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[1c]"></a>sub_bgnd</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sub_bgnd
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_data2ind
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
</UL>

<P><STRONG><a name="[1d]"></a>int2lcd</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = int2lcd &rArr; bin2bcd_int &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd2lcd_zero
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcd_int
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_data2ind
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
</UL>

<P><STRONG><a name="[20]"></a>ptr_carry</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, common_func.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
</UL>

<P><STRONG><a name="[1e]"></a>event2ind</STRONG> (Thumb, 2598 bytes, Stack size 32 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = event2ind &rArr; int2lcd &rArr; bin2bcd_int &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptr_carry
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_bgnd
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[5b]"></a>long2lcdhyx</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = long2lcdhyx
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[5a]"></a>char2lcdhyx</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = char2lcdhyx
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[58]"></a>int2lcdhyx</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = int2lcdhyx
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[59]"></a>char2lcdbyx</STRONG> (Thumb, 134 bytes, Stack size 4 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = char2lcdbyx
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[57]"></a>pointer_set</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pointer_set
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[22]"></a>tree_down</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tree_down
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_hndl
</UL>

<P><STRONG><a name="[24]"></a>tree_up</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tree_up
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mess
</UL>

<P><STRONG><a name="[25]"></a>bgnd_par</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bgnd_par
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clr_scrn
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mess
</UL>

<P><STRONG><a name="[27]"></a>show_mess</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = show_mess &rArr; tree_up
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bgnd_par
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tree_up
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[29]"></a>event_data2ind</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, common_func.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = event_data2ind &rArr; int2lcd &rArr; bin2bcd_int &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_bgnd
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
</UL>

<P><STRONG><a name="[2a]"></a>ke_start</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ke_start &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_char
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an0
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an1
</UL>

<P><STRONG><a name="[2d]"></a>ke_drv</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ke_drv &rArr; ke_mem_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_send
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_mem_hndl
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>vz_start</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avz_drv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an0
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an1
</UL>

<P><STRONG><a name="[31]"></a>vz_stop</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vz_stop &rArr; vz_mem_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_mem_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an0
</UL>

<P><STRONG><a name="[33]"></a>avz_next_date_hndl</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = avz_next_date_hndl &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avz_drv
</UL>

<P><STRONG><a name="[34]"></a>avz_drv</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = avz_drv &rArr; avz_next_date_hndl &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avz_next_date_hndl
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_start
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>vz_drv</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vz_drv
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>kb_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>kb_hndl</STRONG> (Thumb, 960 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = kb_hndl &rArr; avar_bat_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_send
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_hndl
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>samokalibr_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39]"></a>samokalibr_hndl</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = samokalibr_hndl &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_send
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>ubat_old_drv</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ubat_old_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_ring
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>unet_drv</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = unet_drv &rArr; avar_unet_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>matemat</STRONG> (Thumb, 890 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = matemat &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find_unvol
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>mnemo_hndl</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>adc_init</STRONG> (Thumb, 330 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>adc_drv</STRONG> (Thumb, 834 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adc_drv
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_interrupt (via Veneer)
</UL>

<P><STRONG><a name="[40]"></a>avg_hndl</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = avg_hndl &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>rele_hndl</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rele_hndl
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find_unvol
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>bps_hndl</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bps_hndl
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find_unvol
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>bps_drv</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bps_drv &rArr; avar_bps_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>bat_hndl</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bat_hndl
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find_unvol
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[47]"></a>klimat_hndl</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = klimat_hndl
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find_unvol
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>bat_drv</STRONG> (Thumb, 1280 bytes, Stack size 32 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bat_drv &rArr; wrk_mem_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrk_mem_hndl
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_char
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_hndl
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_as_hndl
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>u_necc_hndl</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = u_necc_hndl &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find_unvol
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>num_necc_hndl</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = num_necc_hndl &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>cntrl_hndl</STRONG> (Thumb, 718 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cntrl_hndl &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_send
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find_unvol
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>ext_drv</STRONG> (Thumb, 294 bytes, Stack size 20 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ext_drv
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>zar_superviser_start</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zar_superviser_drv
</UL>

<P><STRONG><a name="[4e]"></a>zar_superviser_drv</STRONG> (Thumb, 410 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = zar_superviser_drv &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zar_superviser_start
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>vent_hndl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>mess_hndl</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, mess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mess_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e]"></a>mess_send</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, mess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mess_send
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntrl_hndl
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samokalibr_hndl
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_hndl
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_drv
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an2
</UL>

<P><STRONG><a name="[38]"></a>mess_find</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, mess.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mess_find
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_hndl
</UL>

<P><STRONG><a name="[3f]"></a>mess_find_unvol</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, mess.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntrl_hndl
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_necc_hndl
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klimat_hndl
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_hndl
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bps_hndl
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rele_hndl
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matemat
</UL>

<P><STRONG><a name="[5f]"></a>ret_ind</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ret.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[62]"></a>ret_ind_sec</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ret.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[28]"></a>ret</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ret.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mess
</UL>

<P><STRONG><a name="[50]"></a>ret_hndl</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ret.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ret_hndl &rArr; tree_down
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tree_down
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>gran_ring_char</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gran.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[2c]"></a>gran_char</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gran.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_read
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_drv
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_start
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
</UL>

<P><STRONG><a name="[43]"></a>gran</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gran.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntrl_hndl
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_necc_hndl
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_necc_hndl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_drv
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klimat_hndl
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bps_hndl
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
</UL>

<P><STRONG><a name="[3b]"></a>gran_ring</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gran.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ubat_old_drv
</UL>

<P><STRONG><a name="[7f]"></a>avar_hndl</STRONG> (Thumb, 356 bytes, Stack size 8 bytes, avar_hndl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = avar_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>reload_hndl</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, avar_hndl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = reload_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>avar_unet_hndl</STRONG> (Thumb, 528 bytes, Stack size 24 bytes, avar_hndl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = avar_unet_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unet_drv
</UL>

<P><STRONG><a name="[45]"></a>avar_bps_hndl</STRONG> (Thumb, 626 bytes, Stack size 40 bytes, avar_hndl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = avar_bps_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_drv
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bps_drv
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an2
</UL>

<P><STRONG><a name="[49]"></a>wrk_mem_hndl</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, avar_hndl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wrk_mem_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_drv
</UL>

<P><STRONG><a name="[37]"></a>avar_bat_hndl</STRONG> (Thumb, 552 bytes, Stack size 24 bytes, avar_hndl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = avar_bat_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_drv
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_hndl
</UL>

<P><STRONG><a name="[4a]"></a>avar_bat_as_hndl</STRONG> (Thumb, 500 bytes, Stack size 24 bytes, avar_hndl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = avar_bat_as_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_drv
</UL>

<P><STRONG><a name="[30]"></a>ke_mem_hndl</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, avar_hndl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ke_mem_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_drv
</UL>

<P><STRONG><a name="[32]"></a>vz_mem_hndl</STRONG> (Thumb, 442 bytes, Stack size 24 bytes, avar_hndl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vz_mem_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_stop
</UL>

<P><STRONG><a name="[53]"></a>def_set</STRONG> (Thumb, 466 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = def_set &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[54]"></a>net_drv</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = net_drv &rArr; avar_bps_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_out
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>parol_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[7a]"></a>bitmap_hndl</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bitmap_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>ind_hndl</STRONG> (Thumb, 23900 bytes, Stack size 416 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ind_hndl &rArr; event_data2ind &rArr; int2lcd &rArr; bin2bcd_int &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_send
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find_unvol
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_find
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_char
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_data2ind
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mess
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bgnd_par
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pointer_set
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char2lcdbyx
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcdhyx
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char2lcdhyx
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long2lcdhyx
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptr_carry
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_bgnd
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcdyx
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long2lcdyx_mmm
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long2lcd_mmm
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd_mmm
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>but_drv</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = but_drv
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>but_an</STRONG> (Thumb, 14040 bytes, Stack size 56 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = but_an &rArr; def_set &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_write
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_out
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_out_adr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parol_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_set
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_ring_char
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_ind_sec
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_ind
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_char
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_as_hndl
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avz_next_date_hndl
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_stop
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_start
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_start
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mess
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tree_up
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tree_down
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptr_carry
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8]"></a>main</STRONG> (Thumb, 758 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = main &rArr; ind_hndl &rArr; event_data2ind &rArr; int2lcd &rArr; bin2bcd_int &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_reset
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in1
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in0
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_read
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_read
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_on
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init_
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer1
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_hndl
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_write
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_reset
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_drv
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullCAN_SetFilter
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_drv
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitmap_hndl
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_drv
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_hndl
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_hndl
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ret_hndl
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_hndl
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vent_hndl
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zar_superviser_drv
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ext_drv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntrl_hndl
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_necc_hndl
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_necc_hndl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_drv
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klimat_hndl
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_hndl
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bps_drv
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bps_hndl
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rele_hndl
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avg_hndl
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mnemo_hndl
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matemat
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unet_drv
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ubat_old_drv
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samokalibr_hndl
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samokalibr_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_hndl
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_drv
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avz_drv
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_drv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[9]"></a>timer1_interrupt</STRONG> (ARM, 568 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = timer1_interrupt &rArr; adc_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_drv (via Veneer)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_drv (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>i2c_Start</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_write
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_read
</UL>

<P><STRONG><a name="[97]"></a>i2c_Restart</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_read
</UL>

<P><STRONG><a name="[88]"></a>i2c_SendByte</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_write
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_read
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendAddress
</UL>

<P><STRONG><a name="[87]"></a>i2c_SendAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_SendAddress &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_write
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_read
</UL>

<P><STRONG><a name="[96]"></a>i2c_ReadAcknowledge</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_write
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_read
</UL>

<P><STRONG><a name="[98]"></a>i2c_ReadByte</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i2c_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_read
</UL>

<P><STRONG><a name="[99]"></a>i2c_SendAcknowledge</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_read
</UL>

<P><STRONG><a name="[9a]"></a>i2c_Stop</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_write
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_read
</UL>

<P><STRONG><a name="[73]"></a>watchdog_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, watchdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = watchdog_init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>watchdog_reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, watchdog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = watchdog_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via Veneer)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>memo_read</STRONG> (Thumb, 1714 bytes, Stack size 24 bytes, memo.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = memo_read &rArr; lc640_read_long &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>init_timer1</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>lcd1_chk</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data1_wr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_wr
</UL>

<P><STRONG><a name="[8f]"></a>lcd2_chk</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data2_wr
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_wr
</UL>

<P><STRONG><a name="[8c]"></a>lcd1_wr</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd1_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_on
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_raw
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_col
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_page
</UL>

<P><STRONG><a name="[8e]"></a>lcd2_wr</STRONG> (Thumb, 188 bytes, Stack size 12 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_on
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_raw
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_col
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_page
</UL>

<P><STRONG><a name="[90]"></a>data1_wr</STRONG> (Thumb, 186 bytes, Stack size 12 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = data1_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[91]"></a>data2_wr</STRONG> (Thumb, 184 bytes, Stack size 12 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = data2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_chk
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[92]"></a>lcd_set_page</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_set_page &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_wr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[93]"></a>lcd_set_col</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_set_col &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_wr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[94]"></a>lcd_set_raw</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_set_raw &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_wr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_out
</UL>

<P><STRONG><a name="[65]"></a>lcd_init</STRONG> (Thumb, 194 bytes, Stack size 4 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lcd_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>lcd_init_</STRONG> (Thumb, 184 bytes, Stack size 4 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lcd_init_
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>lcd_clear</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_clear &rArr; lcd_set_col &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_col
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_page
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data2_wr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>lcd_on</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_on &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd2_wr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>lcd_out</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, lcd_agm1232_uku206.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lcd_out &rArr; lcd_set_raw &rArr; lcd2_wr
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_raw
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_col
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_page
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data2_wr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data1_wr
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>pcf8563_read</STRONG> (Thumb, 342 bytes, Stack size 16 bytes, pcf8563.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pcf8563_read &rArr; i2c_ReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_char
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendAcknowledge
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadByte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadAcknowledge
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendAddress
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Restart
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>pcf8563_write</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, pcf8563.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pcf8563_write &rArr; i2c_SendAddress &rArr; i2c_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via Veneer)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via Veneer)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Stop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_ReadAcknowledge
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendAddress
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_SendByte
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[9d]"></a>spi1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, 25lc640.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_write
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_read
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long
</UL>

<P><STRONG><a name="[9c]"></a>spi1_config</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, 25lc640.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long
</UL>

<P><STRONG><a name="[9e]"></a>spi1_unconfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, 25lc640.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_write
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_read
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long
</UL>

<P><STRONG><a name="[9b]"></a>lc640_wren</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lc640_wren
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
</UL>

<P><STRONG><a name="[9f]"></a>lc640_rdsr</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long_ptr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long
</UL>

<P><STRONG><a name="[1f]"></a>lc640_read_int</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lc640_read_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_read
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_hndl
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrk_mem_hndl
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_mem_hndl
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_mem_hndl
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_hndl
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_as_hndl
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zar_superviser_drv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_drv
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_drv
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
</UL>

<P><STRONG><a name="[8b]"></a>lc640_read_long</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lc640_read_long &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memo_read
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an0
</UL>

<P><STRONG><a name="[21]"></a>lc640_read_long_ptr</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lc640_read_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_mem_hndl
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_hndl
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_as_hndl
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_data2ind
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
</UL>

<P><STRONG><a name="[61]"></a>lc640_write</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lc640_write &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[2b]"></a>lc640_write_int</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;def_set
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_hndl
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrk_mem_hndl
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_mem_hndl
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_mem_hndl
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_hndl
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_as_hndl
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;zar_superviser_drv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_drv
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;samokalibr_hndl
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avz_next_date_hndl
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_drv
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_start
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an0
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an1
</UL>

<P><STRONG><a name="[a0]"></a>lc640_write_long</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lc640_write_long &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an0
</UL>

<P><STRONG><a name="[52]"></a>lc640_write_long_ptr</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, 25lc640.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_rdsr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_wren
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reload_hndl
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrk_mem_hndl
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_mem_hndl
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_mem_hndl
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_unet_hndl
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_hndl
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bat_as_hndl
</UL>

<P><STRONG><a name="[a1]"></a>spi1_ad7705_config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ad7705.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_write
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_read
</UL>

<P><STRONG><a name="[68]"></a>ad7705_reset</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ad7705.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_drv
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>ad7705_write</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ad7705.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ad7705_write
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_ad7705_config
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_drv
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>ad7705_read</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ad7705.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ad7705_read
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_ad7705_config
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1_unconfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi1
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_drv
</UL>

<P><STRONG><a name="[7c]"></a>ad7705_drv</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, ad7705.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ad7705_drv &rArr; ad7705_write
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_write
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_reset
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_read
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via Veneer)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>beep_init</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = beep_init
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_hndl
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
</UL>

<P><STRONG><a name="[80]"></a>beep_hndl</STRONG> (Thumb, 200 bytes, Stack size 20 bytes, beep.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = beep_hndl &rArr; beep_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>beep_drv</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, beep.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_interrupt (via Veneer)
</UL>

<P><STRONG><a name="[a9]"></a>CRC1_in</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC1_in
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_isr_rx1 (via Veneer)
</UL>

<P><STRONG><a name="[aa]"></a>CRC2_in</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC2_in
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_isr_rx1 (via Veneer)
</UL>

<P><STRONG><a name="[a6]"></a>CRC1_out</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC1_out
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an1
</UL>

<P><STRONG><a name="[a7]"></a>CRC2_out</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC2_out
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an1
</UL>

<P><STRONG><a name="[5e]"></a>can1_out_adr</STRONG> (Thumb, 866 bytes, Stack size 20 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = can1_out_adr
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an1
</UL>

<P><STRONG><a name="[a3]"></a>paking</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = paking &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an1
</UL>

<P><STRONG><a name="[55]"></a>can2_out</STRONG> (Thumb, 144 bytes, Stack size 36 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = can2_out
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_drv
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an0
</UL>

<P><STRONG><a name="[a5]"></a>can_adr_hndl</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, full_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an1
</UL>

<P><STRONG><a name="[a4]"></a>can_in_an1</STRONG> (Thumb, 1116 bytes, Stack size 32 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = can_in_an1 &rArr; ke_start &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1_out_adr
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_start
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_start
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_adr_hndl
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paking
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC2_out
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC1_out
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_isr_rx1 (via Veneer)
</UL>

<P><STRONG><a name="[a8]"></a>can_in_an2</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = can_in_an2 &rArr; avar_bps_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mess_send
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avar_bps_hndl
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_isr_rx2 (via Veneer)
</UL>

<P><STRONG><a name="[6b]"></a>can1_init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>can2_init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can2_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>FullCAN_SetFilter</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FullCAN_SetFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a]"></a>can_isr_rx1</STRONG> (ARM, 396 bytes, Stack size 48 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = can_isr_rx1 &rArr; can_in_an1 &rArr; ke_start &rArr; lc640_write_int &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an1 (via Veneer)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC2_in (via Veneer)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC1_in (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> full_can.o(.text)
</UL>
<P><STRONG><a name="[d]"></a>can_isr_rx2</STRONG> (ARM, 232 bytes, Stack size 32 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = can_isr_rx2 &rArr; can_in_an2 &rArr; avar_bps_hndl &rArr; lc640_write_long_ptr &rArr; lc640_rdsr
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_in_an2 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> full_can.o(.text)
</UL>
<P><STRONG><a name="[b]"></a>can_isr_tx</STRONG> (ARM, 268 bytes, Stack size 44 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = can_isr_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> full_can.o(.text)
</UL>
<P><STRONG><a name="[c]"></a>can_isr_err</STRONG> (ARM, 72 bytes, Stack size 12 bytes, full_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = can_isr_err
</UL>
<BR>[Address Reference Count : 1]<UL><LI> full_can.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>crc_87</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crc_87
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an0
</UL>

<P><STRONG><a name="[af]"></a>crc_95</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crc_95
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an0
</UL>

<P><STRONG><a name="[ac]"></a>putchar0</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = putchar0
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_out_adr0
</UL>

<P><STRONG><a name="[ab]"></a>uart_out_adr0</STRONG> (Thumb, 70 bytes, Stack size 116 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = uart_out_adr0 &rArr; putchar0
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar0
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an0
</UL>

<P><STRONG><a name="[6e]"></a>uart0_init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart0_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>uart_in_an0</STRONG> (Thumb, 1452 bytes, Stack size 64 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = uart_in_an0 &rArr; uart_out_adr0 &rArr; putchar0
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can2_out
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_stop
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_start
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_start
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_out_adr0
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_95
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_87
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_long
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in0
</UL>

<P><STRONG><a name="[b1]"></a>index_offset0</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart0.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in0
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_check0
</UL>

<P><STRONG><a name="[b0]"></a>control_check0</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = control_check0
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_offset0
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in0
</UL>

<P><STRONG><a name="[77]"></a>uart_in0</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = uart_in0 &rArr; uart_in_an0 &rArr; uart_out_adr0 &rArr; putchar0
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_check0
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_offset0
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an0
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via Veneer)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e]"></a>uart0_interrupt</STRONG> (ARM, 192 bytes, Stack size 20 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uart0_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart0.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>putchar1</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = putchar1
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_out_adr1
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_out1
</UL>

<P><STRONG><a name="[b2]"></a>uart_out1</STRONG> (Thumb, 90 bytes, Stack size 52 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = uart_out1 &rArr; putchar1
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar1
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
</UL>

<P><STRONG><a name="[b4]"></a>uart_out_adr1</STRONG> (Thumb, 70 bytes, Stack size 316 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = uart_out_adr1 &rArr; putchar1
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar1
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
</UL>

<P><STRONG><a name="[6f]"></a>uart1_init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>uart_in_an1</STRONG> (Thumb, 8572 bytes, Stack size 40 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = uart_in_an1 &rArr; uart_out_adr1 &rArr; putchar1
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_write_int
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran_char
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gran
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vz_start
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ke_start
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_long_ptr
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lc640_read_int
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ptr_carry
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_out_adr1
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_out1
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_95
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_87
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in1
</UL>

<P><STRONG><a name="[b7]"></a>index_offset1</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in1
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_check1
</UL>

<P><STRONG><a name="[b6]"></a>control_check1</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = control_check1
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_offset1
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in1
</UL>

<P><STRONG><a name="[78]"></a>uart_in1</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = uart_in1 &rArr; uart_in_an1 &rArr; uart_out_adr1 &rArr; putchar1
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_check1
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;index_offset1
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in_an1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_enable_irq (via Veneer)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_disable_irq (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f]"></a>uart1_interrupt</STRONG> (ARM, 204 bytes, Stack size 20 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uart1_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart1.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[14]"></a>__aeabi_uidivmod</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntrl_hndl
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_necc_hndl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_drv
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event2ind
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin2bcd_int
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paking
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[16]"></a>__aeabi_idivmod</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ind_hndl
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntrl_hndl
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_necc_hndl
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_necc_hndl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_drv
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;avg_hndl
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;matemat
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_hndl
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mess
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long2lcdyx_mmm
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;long2lcd_mmm
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int2lcd_mmm
</UL>

<P><STRONG><a name="[23]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;but_an
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tree_up
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tree_down
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>__scatterload</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload (via Veneer)
</UL>

<P><STRONG><a name="[c8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>__decompress</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__decompress0</STRONG> (ARM, 80 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__ARM_common_call_via_r3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(i.__ARM_common_call_via_r3))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[89]"></a>__ARM_common_disable_irq</STRONG> (ARM, 20 bytes, Stack size 0 bytes, watchdog.o(i.__ARM_common_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_reset (via Veneer)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in1 (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in0 (via Veneer)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_write (via Veneer)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_drv (via Veneer)
</UL>

<P><STRONG><a name="[8a]"></a>__ARM_common_enable_irq</STRONG> (ARM, 16 bytes, Stack size 0 bytes, watchdog.o(i.__ARM_common_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_reset (via Veneer)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in1 (via Veneer)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_in0 (via Veneer)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcf8563_write (via Veneer)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ad7705_drv (via Veneer)
</UL>

<P><STRONG><a name="[cb]"></a>__scatterload_copy</STRONG> (ARM, 28 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[cc]"></a>__scatterload_null</STRONG> (ARM, 4 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[cd]"></a>__scatterload_zeroinit</STRONG> (ARM, 24 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
